class Role
attr_reader :key, :id

private
@@roles=Set.new
@@role_id_map={}

def initialize(key,id)
@key=key
@id=id
@@roles << self
@@role_id_map[id]=self
end

public
None=Role.new(:none,0)
Admin=Role.new(:admin,1)
LeaveApprover=Role.new(:leave_approver,2)

def self.roles
  @@roles
end

def to_s
  {@key => @id}
end

def self.find(role_id)
   @@role_id_map[role_id]
end

def self.find_all(*role_ids)
   role_ids.collect{|x| @@role_id_map[x]}
end

end

module OLSAuthorization

  def self.included(base)
    base.extend(ClassMethods)
    base.helper_method(:show_content_for)
    base.helper_method(:hide_content_for)
    InstanceMethods.__send__ :append_features, base
  end

  module InstanceMethods

    def deny_access_for(*roles)
      respond_not_authorized if roles.any?{|x| current_employee.role_keys.member?(x)}
    end

  end
